name: PR Analysis and Conflict Resolution

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  analyze_pr:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the PR branch
      - name: Checkout PR branch
        uses: actions/checkout@v2

      # Step 2: Set up Git
      - name: Set up Git
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

      # Step 3: Fetch the base branch and attempt a non-destructive merge
      - name: Attempt to merge with base branch
        id: merge
        run: |
          BASE_BRANCH=${{ github.event.pull_request.base.ref }}
          git fetch origin $BASE_BRANCH
          git merge --no-commit --no-ff origin/$BASE_BRANCH || echo "Merge conflict detected"

      # Step 4: Check for merge conflicts
      - name: Check for merge conflicts
        id: conflict_check
        run: |
          if git ls-files -u | grep -q .; then
            echo "conflict=true" >> $GITHUB_ENV
          else
            echo "conflict=false" >> $GITHUB_ENV
          fi

      # Step 5: Capture the code diff of the PR
      - name: Capture code diff
        if: env.conflict == 'true'
        id: capture_diff
        run: |
          git diff origin/${{ github.event.pull_request.base.ref }}... > diff.txt
          cat diff.txt

      # Step 6: Generate explanation using AI
      - name: Generate explanation using OpenAI
        if: env.conflict == 'true'
        id: generate_explanation
        run: |
          DIFF_CONTENT=$(cat diff.txt)
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          PROMPT="The following PR titled '$PR_TITLE' is changing the code as described: $PR_BODY. The diff is as follows: $DIFF_CONTENT. Please explain what the PR is doing, summarize the key changes, describe the cause of the conflict, and suggest a resolution approach."
          
          RESPONSE=$(curl -s -X POST https://api.openai.com/v1/chat/completions \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "model": "gpt-4",
              "messages": [{"role": "user", "content": "'"$PROMPT"'"}],
              "max_tokens": 300
            }')

          # Extract the AI response
          AI_SUMMARY=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')
          echo "$AI_SUMMARY" > explanation.txt
          cat explanation.txt

      # Step 7: Post comment on PR using GitHub API
      - name: Post comment on PR
        if: env.conflict == 'true'
        run: |
          COMMENT_BODY=$(cat explanation.txt)
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{\"body\": \"**Merge Conflict Detected**\\n\\n$COMMENT_BODY\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
